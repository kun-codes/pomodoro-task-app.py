name: Build App

on:
    push:
    pull_request:

jobs:
    build:
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest, macos-latest, macos-13, windows-latest]
                python-version: [3.12]

        steps:
            -   name: Checkout
                uses: actions/checkout@v4

            -   name: Set up Python ${{ matrix.python-version }}
                uses: actions/setup-python@v5
                with:
                    python-version: ${{ matrix.python-version }}

            -   name: Store Architecture (Linux and MacOS)
                if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' || matrix.os == 'macos-13'
                run: |
                    ARCHITECTURE=$(uname -m)
                    echo "ARCHITECTURE=$ARCHITECTURE" >> $GITHUB_ENV

            - name: Store Architecture (Windows)
              if: matrix.os == 'windows-latest'
              run: |
                  echo "ARCHITECTURE=x86_64" >> $env:GITHUB_ENV

            -   name: Install dependencies
                env:
                    POETRY_VIRTUALENVS_CREATE: false
                run: |
                    python -m pip install --upgrade pip
                    python -m pip install poetry
                    poetry install --no-cache --no-interaction --no-root

            -   name: Debug Packages
                run: |
                    pip list
                    poetry show

            -   name: Download latest version of mitmproxy (Linux and MacOS)
                if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' || matrix.os == 'macos-13'
                run: |
                    cd ..
                    if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
                        wget https://downloads.mitmproxy.org/11.0.2/mitmproxy-11.0.2-linux-x86_64.tar.gz
                        tar -xvf mitmproxy-11.0.2-linux-x86_64.tar.gz
                        cp mitmdump Koncentro/mitmdump
                    elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
                        curl -LO https://downloads.mitmproxy.org/11.0.2/mitmproxy-11.0.2-macos-arm64.tar.gz
                        tar -xvf mitmproxy-11.0.2-macos-arm64.tar.gz
                        cp mitmproxy.app/Contents/MacOS/mitmdump Koncentro/mitmdump
                    elif [[ "${{ matrix.os }}" == "macos-13" ]]; then
                        curl -LO https://downloads.mitmproxy.org/11.0.2/mitmproxy-11.0.2-macos-x86_64.tar.gz
                        tar -xvf mitmproxy-11.0.2-macos-x86_64.tar.gz
                        cp mitmproxy.app/Contents/MacOS/mitmdump Koncentro/mitmdump
                    fi
                    cd Koncentro

            -   name: Download latest version of mitmproxy (Windows)
                if: matrix.os == 'windows-latest'
                run: |
                    cd ..
                    Invoke-WebRequest -Uri "https://downloads.mitmproxy.org/11.0.2/mitmproxy-11.0.2-windows-x86_64.zip" -OutFile "mitmproxy-11.0.2-windows-x86_64.zip"
                    Expand-Archive -Path "mitmproxy-11.0.2-windows-x86_64.zip" -DestinationPath .
                    Copy-Item -Path "mitmdump.exe" -Destination "Koncentro\mitmdump.exe"
                    cd "Koncentro"
                    
            # Remove problematic brew libs if Intel Mac
            # https://github.com/Nuitka/Nuitka/issues/2853#issuecomment-2119520735
            - name: Remove problematic brew libs
              if: matrix.os == 'macos-13'
              run: |
                  brew remove --force --ignore-dependencies openssl@3
                  brew cleanup openssl@3

            -   name: Build Executable (Linux and MacOS)
                if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' || matrix.os == 'macos-13'
                uses: Nuitka/Nuitka-Action@main
                with:
                    nuitka-version: 'main'
                    script-name: |
                        src/__main__.py
                    mode: ${{ (matrix.os == 'macos-latest' || matrix.os == 'macos-13') && 'app' || 'standalone' }}
                    enable-plugins: 'pyside6'
                    macos-app-icon: 'assets/logo.icns'
                    linux-icon: 'assets/logo.ico'
                    output-file: 'koncentro'
                    static-libpython: 'yes'
                    include-module: |
                        logging.config
                    include-data-files: |
                        ./src/website_blocker/filter.py=./website_blocker/filter.py
                        ./src/constants.py=./constants.py
                        ./pyproject.toml=./pyproject.toml
                        ./mitmdump=./mitmdump
                        ./alembic.ini=./alembic.ini
                        ./src/migrations/*.py=./src/migrations/
                        ./src/migrations/versions/*.py=./src/migrations/versions/

            -   name: Build Executable (Windows)
                if: matrix.os == 'windows-latest'
                uses: Nuitka/Nuitka-Action@main
                with:
                    nuitka-version: 'main'
                    script-name: |
                        src\__main__.py
                    mode: standalone
                    windows-icon-from-ico: 'assets/logo.ico'
                    mingw64: true
                    enable-plugins: 'pyside6'
                    output-file: 'koncentro'
                    static-libpython: 'yes'
                    include-module: |
                        logging.config
                    include-data-files: |
                        .\src\website_blocker\filter.py=.\website_blocker\filter.py
                        .\src\constants.py=.\constants.py
                        .\pyproject.toml=.\pyproject.toml
                        .\mitmdump.exe=.\mitmdump.exe
                        .\alembic.ini=.\alembic.ini
                        .\src\migrations\*.py=.\src\migrations\
                        .\src\migrations\versions\*.py=.\src\migrations\versions\

            -   name: Install tree (MacOS)
                if: matrix.os == 'macos-latest' || matrix.os == 'macos-13'
                run: brew install tree

            -   name: tree command (Linux and MacOS)
                if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' || matrix.os == 'macos-13'
                run: |
                    tree build/

            -   name: tree command (Windows)
                if: matrix.os == 'windows-latest'
                run: |
                    Get-ChildItem -Recurse "build\"

            -   name: Upload artifacts Linux
                if: matrix.os == 'ubuntu-latest'
                uses: actions/upload-artifact@v4
                with:
                    name: '${{ matrix.os }}_${{ env.ARCHITECTURE }}-build'
                    path: 'build/__main__.dist/'
                    include-hidden-files: 'true'

            -   name: Upload artifacts MacOS
                if: matrix.os == 'macos-latest' || matrix.os == 'macos-13'
                uses: actions/upload-artifact@v4
                with:
                    name: '${{ matrix.os }}_${{ env.ARCHITECTURE }}-build'
                    path: 'build/__main__.app/Contents/MacOS/'
                    include-hidden-files: 'true'

            -   name: Upload artifacts Windows
                if: matrix.os == 'windows-latest'
                uses: actions/upload-artifact@v4
                with:
                    name: '${{ matrix.os }}_${{ env.ARCHITECTURE }}-build'
                    path: 'build\__main__.dist\'
                    include-hidden-files: 'true'
